{"id":"main.js","dependencies":[{"name":"C:\\Users\\sua\\Frontend\\js-test\\package.json","includedInParent":true,"mtime":1628515687177},{"name":"q","loc":{"line":89,"column":24},"parent":"C:\\Users\\sua\\Frontend\\js-test\\main.js","resolved":"C:\\Users\\sua\\Frontend\\js-test\\node_modules\\q\\q.js"},{"name":"./getRandom","loc":{"line":90,"column":19},"parent":"C:\\Users\\sua\\Frontend\\js-test\\main.js","resolved":"C:\\Users\\sua\\Frontend\\js-test\\getRandom.js"}],"generated":{"js":"\"use strict\";\n\nvar _q = require(\"q\");\n\nvar _getRandom = _interopRequireDefault(require(\"./getRandom\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":3,"column":0},"source":"main.js","original":{"line":89,"column":0}},{"generated":{"line":5,"column":0},"source":"main.js","original":{"line":90,"column":0}}],"sources":{"main.js":"/*\r\nimport getType from \"./getType\";\r\n\r\nconsole.log(typeof \"hello world\");\r\nconsole.log(typeof 123);\r\nconsole.log(typeof true);\r\nconsole.log(typeof undefined);\r\nconsole.log(typeof null);\r\nconsole.log(typeof {});\r\nconsole.log(typeof []);\r\n\r\nconsole.log(getType(123));\r\nconsole.log(getType(false));\r\nconsole.log(getType(null));\r\nconsole.log(getType({}));\r\nconsole.log(getType([]));\r\n*/\r\n\r\n/*\r\n\r\n// 산술 연산자(arithmetic operator)\r\n\r\nconsole.log(1 + 2);\r\nconsole.log(5 - 7);\r\nconsole.log(3 * 4);\r\nconsole.log(10 / 2);\r\nconsole.log(7 % 5);\r\n\r\n// 할당 연산자(assignment operator)\r\n\r\nlet a = 2;\r\n//a = a + 1;\r\na += 1;\r\na *= 1;\r\nconsole.log(a);\r\n\r\n*/\r\n\r\n/* \r\n// 비교 연산자(comparision operator)\r\n\r\nconst a = 1;\r\nconst b = 3;\r\n\r\nconsole.log(a === b);\r\n\r\nfunction isEqual(x, y) {\r\n  return x === y;\r\n}\r\n\r\nconsole.log(isEqual(1, 1));\r\nconsole.log(isEqual(2, \"2\"));\r\n\r\nconsole.log(a !== b);\r\nconsole.log(a < b);\r\n\r\n*/\r\n\r\n/* \r\n// 논리 연산자(logical operator)\r\n\r\nconst a = 1 === 1;\r\nconst b = \"AB\" === \"AB\";\r\nconst c = false;\r\n\r\nconsole.log(a);\r\nconsole.log(b);\r\nconsole.log(c);\r\n\r\nconsole.log(\"&&: \", a && b && c);\r\nconsole.log(\"||: \", a || b || c);\r\nconsole.log(\"!: \", !a);\r\n*/\r\n\r\n/*\r\n// 삼항 연산자(ternary operator)\r\n\r\nconst a = 1 < 2;\r\n\r\nif (a) {\r\n  console.log(\"참\");\r\n} else {\r\n  console.log(\"거짓\");\r\n}\r\n\r\nconsole.log(a ? \"참\" : \"거짓\");\r\n*/\r\n\r\nimport { timeout } from \"q\";\r\nimport random from \"./getRandom\";\r\n\r\n/*\r\n\r\n// 조건문 (If statement)\r\n\r\nconst a = random();\r\n\r\nif (a === 0) {\r\n  console.log(\"a is 0\");\r\n} else if (a === 2) {\r\n  console.log(\"a is 2\");\r\n} else {\r\n  console.log(\"rest...\");\r\n}\r\n*/\r\n\r\n/*\r\n// 조건문 (Switch statement)\r\n\r\nconst a = random();\r\n\r\nswitch (a) {\r\n  case 0:\r\n    console.log(\"a is 0\");\r\n    break;\r\n  case 2:\r\n    console.log(\"a is 2\");\r\n    break;\r\n  case 4:\r\n    console.log(\"a is 4\");\r\n    break;\r\n  default:\r\n    console.log(\"rest...\");\r\n}\r\n*/\r\n\r\n/*\r\n// 반복문 (For statement)\r\n// for (시작조건; 종료조건; 변화조건) {}\r\nconst ulEl = document.querySelector(\"ul\");\r\nfor (let i = 0; i < 3; i += 1) {\r\n  const li = document.createElement(\"li\");\r\n  li.textContent = `list-${i + 1}`;\r\n  if ((i + 1) % 2 === 0) {\r\n    li.addEventListener(\"click\", function () {\r\n      console.log(li.textContent);\r\n    });\r\n  }\r\n  ulEl.appendChild(li);\r\n}\r\n*/\r\n\r\n/*\r\n// 변수 유효범위(Variable Scope)\r\n// var, let, const\r\n\r\nfunction scope() {\r\n  if (true) {\r\n    const a = 123;\r\n    console.log(a);\r\n  }\r\n}\r\nscope();\r\n*/\r\n\r\n/*\r\n// 형 변환(Type conversion)\r\n\r\n// Truthy(참 같은 값)\r\n// true, {}, [], 1, 2, 'false', -12, '3.14' ...\r\n\r\n// Falsy(거짓 같은 값)\r\n// false, '', null, undefined, 0, -0, NaN\r\n\r\nif ('false') {\r\n    console.log(123)\r\n}\r\n*/\r\n\r\n/*\r\n// 함수 복습\r\n\r\nfunction sum() {\r\n  console.log(arguments);\r\n  return arguments[0] + arguments[1];\r\n}\r\n\r\nsum(7, 3);\r\n*/\r\n\r\n/*\r\n// 화살표 함수\r\n// () => {} vs function() {}\r\n\r\nconst double = function (x) {\r\n  return x * 2;\r\n};\r\nconsole.log(\"double: \", double(7));\r\n\r\nconst doubleArrow = (x) => {\r\n  return x * 2;\r\n};\r\nconsole.log(\"doubleArrow\", doubleArrow(7));\r\n*/\r\n\r\n/*\r\n// 즉시실행함수\r\n// IIFE, Immediately-Invoked Function Expression\r\n\r\nconst a = 7;\r\nfunction double() {\r\n  console.log(a * 2);\r\n}\r\ndouble();\r\n\r\n(function () {\r\n  console.log(a * 2);\r\n})();\r\n*/\r\n\r\n/*\r\n// 호이스팅(Hoisting)\r\n// 함수 선언부가 유효범위 최상단으로 끌어올리는 현상\r\n\r\nconst a = 7;\r\n\r\ndouble();\r\n\r\nfunction double() {\r\n  console.log(a * 2);\r\n}\r\n*/\r\n\r\n/*\r\n// 타이머 함수\r\n// setTimeout(함수, 시간): 일정 시간 후 함수 실행\r\n// setInterval(함수, 시간): 시간 간격마다 함수 실행\r\n// clearTimeout(): 설정된 Timeout 함수를 종료\r\n// clearInterval(): 설정된 Interval 함수를 종료\r\n\r\nconst timer = setTimeout(function () {\r\n  console.log(\"Kim\");\r\n}, 3000);\r\n\r\nconst h1el = document.querySelector(\"h1\");\r\nh1el.addEventListener(\"click\", () => {\r\n  clearTimeout(timer);\r\n});\r\n*/\r\n\r\n/*\r\n// 콜백(Callback)\r\n// 함수의 인수로 사용되는 함수\r\n\r\n// setTimeout(함수 시간)\r\nfunction timeout(callback) {\r\n  setTimeout(() => {\r\n    console.log(\"Kim\");\r\n    callback();\r\n  }, 3000);\r\n}\r\ntimeout(() => {\r\n  console.log(\"Done!\");\r\n});\r\n*/\r\n\r\n/*\r\nconst person = {\r\n  firstName: \"gildong\",\r\n  lastName: \"Hong\",\r\n  getFullName: function () {\r\n    return `${this.firstName} ${this.lastName}`;\r\n  },\r\n};\r\nconsole.log(person.getFullName());\r\n\r\nfunction User(first, last) {\r\n  this.firstName = first;\r\n  this.lastName = last;\r\n}\r\nUser.prototype.getFullName = function () {\r\n  return `${this.firstName} ${this.lastName}`;\r\n};\r\n\r\nconst p = new User(\"gildong\", \"Hong\"); // 생성자 함수\r\nconst amy = new User(\"Amy\", \"Clarke\");\r\nconst neo = new User(\"Neo\", \"Smith\");\r\nconsole.log(p.getFullName());\r\nconsole.log(amy);\r\nconsole.log(neo);\r\n*/\r\n\r\n// this\r\n// 일반(Normal) 함수는 호출 위치에서 따라 this 정의\r\n// 화살표(Arrow) 함수는 자신이 선언된 함수 범위에서 this 정의\r\n\r\n/*\r\n// ES6 Classes\r\n\r\nconst gildong = {\r\n  name: \"Gildong\",\r\n  normal() {\r\n    console.log(this.name);\r\n  },\r\n  arrow: () => {\r\n    console.log(this.name);\r\n  },\r\n};\r\n\r\ngildong.normal();\r\ngildong.arrow();\r\n\r\n//function User(first, last) {\r\n//  this.firstName = first;\r\n//  this.lastName = last;\r\n//}\r\n//User.prototype.getFullName = function () {\r\n//  return `${this.firstName} ${this.lastName}`;\r\n//};\r\n\r\nclass User {\r\n  constructor(first, last) {\r\n    this.firstName = first;\r\n    this.lastName = last;\r\n  }\r\n  getFullName() {\r\n    return `${this.firstName} ${this.lastName}`;\r\n  }\r\n}\r\n\r\nconst p = new User(\"gildong\", \"Hong\"); // 생성자 함수\r\nconst amy = new User(\"Amy\", \"Clarke\");\r\nconst neo = new User(\"Neo\", \"Smith\");\r\nconsole.log(p.getFullName());\r\nconsole.log(amy);\r\nconsole.log(neo);\r\n\r\n*/\r\n\r\n// JS 데이터\r\n\r\n// String: \"\", '', ``\r\n// Number\r\n// Boolean: true, false\r\n// undefined\r\n// null\r\n// Array: []\r\n// Object: {}\r\n\r\n/*\r\nconst result = \"Hello world!\".indexOf(\"world\"); // String.prototype.indexOf()\r\nconsole.log(result);\r\n\r\n//const str = \"0123\";\r\n\r\nconsole.log(\"0123\".length);\r\n\r\nconst str = \"Hello world!\";\r\nconsole.log(str.indexOf(\"hey\") !== -1);\r\nconsole.log(str.slice(0, 3));\r\nconsole.log(str.replace(\"world\", \"hey\"));\r\n\r\nconst str2 = \"thesecon@gmail.com\";\r\nconsole.log(str2.match(/.+(?=@)/)[0]);\r\n\r\nconst str3 = \"  Hello world   \";\r\nconsole.log(str3.trim());\r\n*/\r\n"},"lineCount":null}},"error":null,"hash":"ba4009973828c5d00ff0b9d9054cffb5","cacheData":{"env":{}}}